version: 2
jobs:
  build:
    working_directory: /core-builds
    docker:
      - image: mono:latest
    steps:
      - checkout
      - run: nuget restore Zilon.Core/Zilon.Core/Zilon.Core.csproj -SolutionDirectory ./Zilon.Core
      - run: nuget restore Zilon.Core/Zilon.Bot.Players/Zilon.Bot.Players.csproj -SolutionDirectory ./Zilon.Core
      - run: msbuild Zilon.Core/Zilon.Core/Zilon.Core.csproj /t:Build /p:Configuration=Release /p:OutputPath=../../bin
      - run: msbuild Zilon.Core/Zilon.Bot.Players/Zilon.Bot.Players.csproj /t:Build /p:Configuration=Release /p:OutputPath=../../bin
      - persist_to_workspace:
          root: bin
          paths:
            - ./*
  test_45:
    working_directory: /test45
    docker:
      - image: mono:latest
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
      ZILON_LIV_SCHEME_CATALOG: ./Zilon.Client/Assets/Resources/Schemes
    steps:
      - checkout
      - run: nuget restore Zilon.Core/Zilon.Core.Tests/Zilon.Core.Tests.csproj -SolutionDirectory ./Zilon.Core
      - run: msbuild Zilon.Core/Zilon.Core.Tests/Zilon.Core.Tests.csproj /p:Configuration=Release
      - run: mono --debug /test45/Zilon.Core/packages/NUnit.ConsoleRunner.3.10.0/tools/nunit3-console.exe Zilon.Core/Zilon.Core.Tests/bin/Release/Zilon.Core.Tests.dll --encoding utf-8
  build_Win_x64:
    docker:
      - image: gableroux/unity3d:2019.2.5f1-windows
    steps:
      - checkout
      - run: mkdir -p /root/.cache/unity3d
      - run: mkdir -p /root/.local/share/unity3d/Unity/
      - run: openssl aes-256-cbc -d -in .circleci/Unity_v2019.x.ulf-cipher -k ${CIPHER_KEY} >> /root/.local/share/unity3d/Unity/Unity_lic.ulf
      - attach_workspace:
          at: /core-builds/bin
      - run: mkdir -p ./Zilon.Client/Assets/Plugins/ && cp -a /core-builds/bin/. ./Zilon.Client/Assets/Plugins/
      - run:
          command: |
            apt update && apt install -y git 
            git clone https://github.com/kreghek/Zilon_Roguelike_Plugins.git temp
      - run: cp -a temp/. ./Zilon.Client/Assets/Plugins/
      - run:
          name: Build
          command: chmod +x .circleci/buildWindows64.sh && .circleci/buildWindows64.sh
      - attach_workspace:
          at: /client/builds
      - run:
          name: Zipping build
          command: apt update && apt -y install zip && zip -r /client/builds/LAST_Win64.zip ./Zilon.Client/Builds/*
  build_Win_x32:
    docker:
      - image: gableroux/unity3d:2019.2.5f1-windows
    steps:
      - checkout
      - run: mkdir -p /root/.cache/unity3d
      - run: mkdir -p /root/.local/share/unity3d/Unity/
      - run: openssl aes-256-cbc -d -in .circleci/Unity_v2019.x.ulf-cipher -k ${CIPHER_KEY} >> /root/.local/share/unity3d/Unity/Unity_lic.ulf
      - attach_workspace:
          at: /core-builds/bin
      - run: mkdir -p ./Zilon.Client/Assets/Plugins/ && cp -a /core-builds/bin/. ./Zilon.Client/Assets/Plugins/
      - run:
          command: |
            apt update && apt install -y git 
            git clone https://github.com/kreghek/Zilon_Roguelike_Plugins.git temp
      - run: cp -a temp/. ./Zilon.Client/Assets/Plugins/
      - run:
          name: Build
          command: chmod +x .circleci/buildWindows32.sh && .circleci/buildWindows32.sh
      - attach_workspace:
          at: /client/builds
      - run:
          name: Zipping build
          command: apt update && apt -y install zip && zip -r /client/builds/LAST_Win32.zip ./Zilon.Client/Builds/*
  build_Linux_x64:
    docker:
      - image: gableroux/unity3d:2019.2.5f1-windows
    steps:
      - checkout
      - run: mkdir -p /root/.cache/unity3d
      - run: mkdir -p /root/.local/share/unity3d/Unity/
      - run: openssl aes-256-cbc -d -in .circleci/Unity_v2019.x.ulf-cipher -k ${CIPHER_KEY} >> /root/.local/share/unity3d/Unity/Unity_lic.ulf
      - attach_workspace:
          at: /core-builds/bin
      - run: mkdir -p ./Zilon.Client/Assets/Plugins/ && cp -a /core-builds/bin/. ./Zilon.Client/Assets/Plugins/
      - run:
          command: |
            apt update && apt install -y git 
            git clone https://github.com/kreghek/Zilon_Roguelike_Plugins.git temp
      - run: cp -a temp/. ./Zilon.Client/Assets/Plugins/
      - run:
          name: Build
          command: chmod +x .circleci/buildLinux64.sh && .circleci/buildLinux64.sh
      - attach_workspace:
          at: /client/builds
      - run:
          name: Zipping build
          command: apt update && apt -y install zip && zip -r /client/builds/LAST_Linux64.zip ./Zilon.Client/Builds/*
  # Только для этого билда на выходе получается пустая папка.
  # Поэтому он временно отключен.
  build_Linux_x32:
    docker:
      - image: gableroux/unity3d:2019.2.5f1-windows
    steps:
      - checkout
      - run: mkdir -p /root/.cache/unity3d
      - run: mkdir -p /root/.local/share/unity3d/Unity/
      - run: openssl aes-256-cbc -d -in .circleci/Unity_v2019.x.ulf-cipher -k ${CIPHER_KEY} >> /root/.local/share/unity3d/Unity/Unity_lic.ulf
      - attach_workspace:
          at: /core-builds/bin
      - run: mkdir -p ./Zilon.Client/Assets/Plugins/ && cp -a /core-builds/bin/. ./Zilon.Client/Assets/Plugins/
      - run:
          command: |
            apt update && apt install -y git 
            git clone https://github.com/kreghek/Zilon_Roguelike_Plugins.git temp
      - run: cp -a temp/. ./Zilon.Client/Assets/Plugins/
      - run:
          name: Build
          command: chmod +x .circleci/buildLinux32.sh && .circleci/buildLinux32.sh
      - attach_workspace:
          at: /client/builds
      - run:
          name: Zipping build
          command: apt update && apt -y install zip && zip -r /client/builds/LAST_Linux32.zip ./Zilon.Client/Builds/*
  pre_deploy:
    working_directory: /client
    docker:
      - image: alpine:latest
    steps:
      - run: mkdir -p ./builds
      - persist_to_workspace:
          root: builds
          paths:
            - ./*
  deploy:
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: /client/builds
      - store_artifacts:
          path: /client/builds/LAST_Win64.zip
      - store_artifacts:
          path: /client/builds/LAST_Win32.zip
      - store_artifacts:
          path: /client/builds/LAST_Linux64.zip
      # Этот шаг нужно включить, когда будет исправлена пустая сборка под Linux32
      #- store_artifacts:
      #    path: /client/builds/LAST_Linux32.zip
  
workflows:
  version: 2
  commit:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-.*/
      - test_45:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-*/
      - build_Win_x64:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-.*/
          requires:
            - build
            - pre_deploy
      - build_Win_x32:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-.*/
          requires:
            - build
            - pre_deploy
      - build_Linux_x64:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-.*/
          requires:
            - build
            - pre_deploy
#      - build_Linux_x32:
#          filters:
#            branches:
#              only:
#                - master
#                - circle-ci
#                - /release-.*/
#          requires:
#            - build
#            - pre_deploy
      - pre_deploy:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-.*/
      - deploy:
          filters:
            branches:
              only:
                - master
                - circle-ci
                - /release-.*/
          requires:
            - pre_deploy
            - build_Win_x64
            - build_Win_x32
            - build_Linux_x64
            #- build_Linux_x32
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - beta
    jobs:
      - build
      - build_Win_x64:
          requires:
            - build
      - build_Win_x32:
          requires:
            - build
      - build_Linux_x64:
          requires:
            - build
#      - build_Linux_x32:
#          requires:
#            - build