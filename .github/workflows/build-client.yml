name: Build game clients

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - '!dependabot/nuget/**'
    tags:
      - 'v*.*.*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build client ${{ matrix.project }} ${{ matrix.configuration }} ${{ matrix.runtime }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - Zilon.TextClient
          - CDT.LAST.MonoGameClient
        configuration:
          - Release
          - Debug
        runtime:
          - win-x64
          - linux-x64
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: Setup Wine
        run: |
          sudo apt update
          sudo apt install wine64 p7zip-full
          wget -qO- https://raw.githubusercontent.com/MonoGame/MonoGame/master/Tools/MonoGame.Effect.Compiler/mgfxc_wine_setup.sh | sh
          cd ~/.winemonogame/drive_c/windows/system32

          DOTNET_URL="https://download.visualstudio.microsoft.com/download/pr/44d08222-aaa9-4d35-b24b-d0db03432ab7/52a4eb5922afd19e8e0d03e0dbbb41a0/dotnet-sdk-6.0.302-win-x64.zip"
          curl "https://download.visualstudio.microsoft.com/download/pr/44d08222-aaa9-4d35-b24b-d0db03432ab7/52a4eb5922afd19e8e0d03e0dbbb41a0/dotnet-sdk-6.0.302-win-x64.zip" --output "dotnet-sdk.zip"

          7z x "dotnet-sdk.zip" -y

          rm dotnet-sdk.zip

      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Publish ${{ matrix.project }} ${{ matrix.configuration }} ${{ matrix.runtime }}
        if: ${{ contains(matrix.configuration, 'Release') }}
        run: dotnet publish Zilon.Core/${{ matrix.project }}/${{ matrix.project }}.csproj --configuration ${{ matrix.configuration }} --framework net6.0 --output bin --runtime ${{ matrix.runtime }} --self-contained true /p:DebugType=None /p:DebugSymbols=false /p:PublishSingleFile=true

      - name: Publish ${{ matrix.project }} ${{ matrix.configuration }} ${{ matrix.runtime }}
        if: ${{ contains(matrix.configuration, 'Debug') }}
        run: dotnet publish Zilon.Core/${{ matrix.project }}/${{ matrix.project }}.csproj --configuration ${{ matrix.configuration }} --framework net6.0 --output bin --runtime ${{ matrix.runtime }} --no-self-contained

      # This step is nessesary because CopySchemeCatalogToClientBin target in csproj doesn't perform in CI/CD.
      - name: Copy scheme catalog into bin directory for ${{ matrix.project }}
        if: ${{ contains(matrix.project, 'MonoGameClient') }}
        run: cp -a /home/runner/work/Zilon_Roguelike/Zilon_Roguelike/Zilon.Client/Assets/Resources/Schemes/. /home/runner/work/Zilon_Roguelike/Zilon_Roguelike/bin/Content/Schemes/

      - name: Write version to file
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: bin/version.txt
          contents: |
            ver.2.5.8.${{ github.run_number }}
            ${{ github.sha }}
          write-mode: overwrite

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-${{ matrix.configuration }}-${{ matrix.runtime }}
          path: bin